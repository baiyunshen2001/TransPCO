a = readRDS("pvalue_pco_6.rds")
str(a)
b = readRDS("pvalue_pco_15.rds")
str(b)
par(mfrow=c(1, 2))
hist(a)
hist(b)
a = readRDS("pvalue_pco_6.rds")
str(a)
b = readRDS("pvalue_pco_15.rds")
str(b)
par(mfrow=c(1, 2))
hist(a)
hist(b)
a = readRDS("pvalue_pco_6.rds")
str(a)
b = readRDS("pvalue_pco_15.rds")
str(b)
par(mfrow=c(1, 2))
hist(a)
hist(b)
a = readRDS("pvalue_pco_6.rds")
str(a)
b = readRDS("pvalue_pco_15.rds")
str(b)
par(mfrow=c(1, 2))
hist(a)
hist(b)
a = readRDS("pvalue_pco_6.rds")
str(a)
b = readRDS("pvalue_pco_15.rds")
str(b)
par(mfrow=c(1, 2))
hist(a)
hist(b)
a = readRDS("pvalue_pco_6.rds")
str(a)
b = readRDS("pvalue_pco_15.rds")
str(b)
par(mfrow=c(1, 2))
hist(a)
hist(b)
getwd()
x = runif(1000)
y = runif(1000)
cov(x, y)
x = runif(100000)
y = runif(100000)
cov(x, y)
x = runif(100000)
y = runif(100000)
cov(log(abs(x), log(abs(y))
x = runif(100000)
y = runif(100000)
cov(log(abs(x), log(abs(y)))
x = runif(100000)
y = runif(100000)
cov(log(abs(x)), log(abs(y)))
cov(x, y)
load("~/Documents/Dahl Lab/changeN.RData")
boxplot(gomPw_1)
boxplot(kmsPw_1)
library(MASS)
install.packages("mvtnorm")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
## revert output back to the console -- only then access the file!
sink(type = "message")
sink()
file.show("all.Rout")
zz <- file("all.Rout", open = "wt")
sink(zz)
sink(zz, type = "message")
try(log("a"))
try(log("a"))
try(log("a"))
sink()
try(log("a"))
sink(type = "message")
try(log("a"))
sink()
file.show("all.Rout")
file.show("all.Rout")
getwd()
unlink("all.Rout")
q()
a = cbind(rep(0, 8))
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(0,8), ylim = c(0, 35), col = 2, type = "b")
points(b[, i], col = 4, type = "b")
}
a = cbind(rep(0, 8))
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(0,8), ylim = c(0, 35), col = 2, type = "b", pch=2)
points(b[, i], col = 4, type = "b")
}
a = cbind(rep(0, 8))
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(0,8), ylim = c(0, 35), col = 2, type = "b", pch=3)
points(b[, i], col = 4, type = "b")
}
a = cbind(rep(0, 8))
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(0,8), ylim = c(0, 35), col = 2, type = "b", pch=16)
points(b[, i], col = 4, type = "b")
}
a = cbind(rep(0, 8))
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(0,8), ylim = c(0, 35), col = 2, type = "b", pch=16)
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+0.1)
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(0,8), ylim = c(0, 35), col = 2, type = "b", pch=16)
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+1)
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(0,8), ylim = c(0, 35), col = 2, type = "b", pch=16)
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+1)
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2, type = "b", pch=16)
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+1)
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+1)
b = cbind(rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+1, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
for(i in ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+1, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+1, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+1, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
a = cbind(rep(0, 8)+1, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
text("topleft", "a")
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
legend("topleft", "a")
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
legend(1, 30, "a")
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)",
main = paste0("H", i-1))
text(1, 30, "a")
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
text(1, 30, paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
text(2, 30, paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8), rep(0, 8))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
text(1.5, 30, paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3, c(0, 3, 10, 30, 20, 5, 3, 0), rep(0, 8)+3)
b = cbind(rep(0, 8), rep(0, 8), c(0, 3, 10, 30, 20, 5, 3, 0))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
text(1.5, 30, paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3,
c(0, 3, 10, 30, 20, 5, 3, 0),
rep(0, 8)+3,
c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8),
rep(0, 8),
c(0, 3, 10, 30, 20, 5, 3, 0),
c(0, 1, 1, 2, 1, 5, 20, 1))
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
text(1.5, 30, paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3,
c(0, 3, 10, 30, 20, 5, 3, 0),
rep(0, 8)+3,
c(0, 3, 10, 30, 20, 5, 3, 0),
c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8),
rep(0, 8),
c(0, 3, 10, 30, 20, 5, 3, 0),
c(0, 1, 1, 2, 1, 5, 20, 1),
c(0, 3, 10, 30, 20, 5, 3, 0)-1)
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
text(1.5, 30, paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
a = cbind(rep(0, 8)+3,
c(0, 3, 10, 30, 20, 5, 3, 0),
rep(0, 8)+3,
c(0, 3, 10, 30, 20, 5, 3, 0),
c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8),
rep(0, 8),
c(0, 3, 10, 30, 20, 5, 3, 0),
c(0, 1, 1, 2, 1, 5, 20, 1),
c(0, 3, 10, 30, 20, 5, 3, 0)-3)
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
text(1.5, 30, paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
q()
a = cbind(rep(0, 8)+3,
c(0, 3, 10, 30, 20, 5, 3, 0),
rep(0, 8)+3,
c(0, 3, 10, 30, 20, 5, 3, 0),
c(0, 3, 10, 30, 20, 5, 3, 0))
b = cbind(rep(0, 8),
rep(0, 8),
c(0, 3, 10, 30, 20, 5, 3, 0),
c(0, 1, 1, 2, 1, 5, 20, 1),
c(0, 3, 10, 30, 20, 5, 3, 0)-3)
par(mfrow = c(ncol(a), 1))
for(i in 1:ncol(a)){
plot(a[, i], xlim = c(1,8), ylim = c(0, 35), col = 2,
type = "b", pch=16,
xlab = "genomic postion", ylab = "-log10(p)")
text(1.5, 30, paste0("H", i-1))
points(b[, i], col = 4, type = "b", pch=16)
}
dir_input = "/project2/xuanyao/data/DGN/txt_file_of_DGN/"
paste0(dir_input, "genotype.matrix.eqtl.txt")
pwd
getwd()
setwd("~/Documents/R/Trans/script")
setwd("~/Documents/R/Trans/script")
a="ENSG100000.11"
a="ENSG00000223972.4"
a="ENSG00000227232.5"
grep("^ENSG", a)
grep("^ENSG", rep(a, 2))
grep("^ENSG", rep(a, 2), value = TRUE)
grep("^ENSG", rep(a, "a"))
grep("^ENSG", c(a, "a"))
cat("Gene names are ENS ids.", "\n")
cat("Gene names are ENS ids!", "\n")
sapply(c(a, "a"), function(x) strsplit(x, "\\|")[[1]][1])
a
datExpr=matrix(rep(1, 10), ncol = 2, dimnames = list(letters[1:5], letters))
datExpr=matrix(rep(1, 10), ncol = 2, dimnames = list(letters[1:5], letters[1:2]))
datExpr
cov_all=matrix(rep(1, 30), ncol = 6, dimnames = list(LETTERS[20:24], LETTERS[15:20]))
cov_all
cov_all=matrix(rnorm(30), ncol = 6, dimnames = list(LETTERS[20:24], LETTERS[15:20]))
cov_all
### regress out covariates
extract_residual <- function(y, x){
return(lm(y ~ x)$residuals)
}
ex_cov_regressed = apply(datExpr, 2, function(y) extract_residual(y, cov_all))
ex_cov_regressed
datExpr=matrix(rnorm(10, 10, 10), ncol = 2, dimnames = list(letters[1:5], letters[1:2]))
ex_cov_regressed = apply(datExpr, 2, function(y) extract_residual(y, cov_all))
ex_cov_regressed
y=datExpr[1, ]
x=cov_all
lm(y ~ x)
str(y)
str(x)
lm(y ~ x)
y=datExpr[, 1]
lm(y ~ x)
summary(lm(y ~ x))
y
x
cov(x)
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
str(weight)
datExpr=cbind(weight, weight)
cov_all=cbind(group, group, group, group, group)
datExpr
cov_all
ex_cov_regressed = apply(datExpr, 2, function(y) extract_residual(y, cov_all))
ex_cov_regressed
datExpr
rownames(datExpr)=letters[1:20]
cov_all
rownames(cov_all)=LETTERS[1:20]
cov_all
ex_cov_regressed = apply(datExpr, 2, function(y) extract_residual(y, cov_all))
ex_cov_regressed
?merge
ls()
a
y
x
a=x[sample(5)]
a
a=x[sample(5), ]
a
?saveRDS
?dcast
library(data.table)
?dcast
ChickWeight = as.data.table(ChickWeight)
setnames(ChickWeight, tolower(names(ChickWeight)))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
DT
dcast(DT, chick ~ time, fun=mean, subset=.(time < 10 & chick < 20))
dcast(DT, diet+chick ~ time, drop=FALSE)
table(DT$time)
table(DT$chick)
sum(DT$time==18, DT$chick==10)
dcast(DT, chick ~ time, fun=mean, subset=.(time < 10 & chick < 20), value.var = value)
dcast(DT, chick ~ time, fun=mean, subset=.(time < 10 & chick < 20), value.var = "value")
sum(DT$time==18, DT$chick==4)
DT[DT$time==18& DT$chick==4, ]
dcast(DT, chick ~ time, fun.aggregate=mean, subset=.(time < 10 & chick < 20), value.var = "value")
dcast(DT, chick ~ time, fun.aggregate=mean, value.var = "value")
dcast(DT, chick ~ time, value.var = "value")
dcast(DT, time ~ variable, fun=mean)
DT
dcast(DT, chick ~ time, fun=mean)
dcast(DT, chick ~ time)
dcast(DT, chick ~ time, drop = T)
View(DT)
dcast(DT, chick ~ time, drop = T, value.var = "diet")
dcast(DT, chick ~ time, drop = F, value.var = "diet")
dcast(DT, chick ~ time, drop = TRUE, value.var = "diet")
T
DT
a=DT[, c(1,2,5)]
a
dcast(DT, chick ~ time, drop = T, value.var = "value")
dcast(DT, chick ~ time, drop = T, value.var = "value", fun.aggregate = max)
dcast(DT, chick ~ time, drop = T, value.var = "value", fun.aggregate = min)
range(DT$value)
dcast(DT, chick ~ time, drop = T, value.var = "value", fun.aggregate = length)
dcast(DT, chick ~ time, drop = T, value.var = "value", fun.aggregate = as.character)
dcast(DT, chick ~ time, drop = T, value.var = "value", fun.aggregate = is.na)
dcast(DT, chick ~ time, drop = T, value.var = "value")
dcast(DT, chick ~ time, drop = T, value.var = "value", drop=a)
dcast(DT, chick ~ time, drop = T, value.var = "value", drop=TRU
E)
dcast(DT, chick ~ time, drop = T, value.var = "value", drop=TRUE)
dcast(DT, chick ~ time, drop = TRUE, value.var = "value")
dcast(DT, chick ~ time, drop = TRUE, value.var = "value", fill = 100000)
dcast(DT, time ~ variable, fun=mean)
dcast(DT, diet ~ variable, fun=mean)
table(DT$diet)
dcast(DT, diet+chick ~ time)
dcast(DT, diet+chick ~ time, drop=FALSE)
View(dcast(DT, diet+chick ~ time, drop=FALSE))
dcast(DT, chick ~ time, drop = T, value.var = "value")
dcast(DT, chick ~ time, drop = T, value.var = "value", fun.aggregate = max)
dcast(DT, chick ~ time, drop = T, value.var = "value")
any(c(T, F))
any(c(T, F, NA))
any(c(F, F, NA))
any(c(F, T, NA))
??Inf
-Inf == -Inf
ChickWeight = as.data.table(ChickWeight)
setnames(ChickWeight, tolower(names(ChickWeight)))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
# dcast is an S3 method in data.table from v1.9.6
dcast(DT, time ~ variable, fun=mean) # using partial matching of argument
dcast(DT, diet ~ variable, fun=mean)
dcast(DT, diet+chick ~ time, drop=FALSE)
dcast(DT, diet+chick ~ time, drop=FALSE, fill=0)
dcast(DT, diet+chick ~ time, fun.aggregate = max)
dcast(DT, diet+chick ~ time, fun.aggregate = mean)
dcast(DT, diet+chick ~ time)
-Inf == -Inf
c(-Inf, 1) == -Inf
c(Inf, 1) == -Inf
q()
